{"version":3,"sources":["App.js","index.js"],"names":["Container","styled","div","FlexContainer","Button","props","justify","large","light","active","Board","App","useState","displayNumber","setDisplayNumber","previousNumber","setPreviousNumber","currentNumber","setCurrentNumber","operator","setOperator","operatorActive","setOperatorActive","handleNumberInput","event","numberInput","target","innerText","parseInt","toString","replace","length","test","parseFloat","handleOperatorInput","operatorInput","clearOrAllClear","console","log","toLocaleString","onClick","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2eca592d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    max-width: 480px;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: #000000;\r\n    color: #ffffff;\r\n\r\n    @media(min-width: 480px) {\r\n        max-width: 414px;\r\n    }\r\n`;\r\n\r\nconst FlexContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 8px;\r\n`;\r\n\r\nconst Button = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: ${props => props.justify || 'center'};\r\n    width: ${props => props.large ? '168px' : '80px'};\r\n    height: 80px;\r\n    border-radius: ${props => props.large ? '40px' : '50%'};\r\n    background: ${props => props.light ? '#666666' : '#333333'};\r\n    padding-left: ${props => props.large ? '32px' : '0'};\r\n    margin-left: 8px;\r\n    cursor: pointer;\r\n    font-size: 24px;\r\n\r\n    &:hover {\r\n        background: ${props => props.light ? '#777777' : '#444444'}\r\n    }\r\n\r\n    &:first-child {\r\n        margin-left: 0;\r\n    }\r\n\r\n    &:last-child {\r\n        color: ${props => props.active ? '#FF9800' : '#ffffff'};\r\n        background: ${props => props.active ? '#ffffff' : '#FF9800'};\r\n\r\n        &:hover {\r\n            background: ${props => props.active ? '#ffffff' : '#FFA726'};\r\n        }\r\n    }\r\n`;\r\n\r\nconst Board = styled.div`\r\n    width: 344px;\r\n    font-size: 64px;\r\n    padding: 8px 0;\r\n    text-align: right;\r\n`;\r\n\r\nconst App = () => {\r\n    const [displayNumber, setDisplayNumber] = useState(0);\r\n    const [previousNumber, setPreviousNumber] = useState(0);\r\n    const [currentNumber, setCurrentNumber] = useState(0);\r\n    const [operator, setOperator] = useState('');\r\n    const [operatorActive, setOperatorActive] = useState(false);\r\n\r\n    const numberWithComma = number => {\r\n        return number.toLocaleString();\r\n    };\r\n\r\n    const handleNumberInput = event => {\r\n        const numberInput = event.target.innerText;\r\n\r\n        const hasDecimalPoint = /\\./;\r\n\r\n        // Cancel operator highlight\r\n        setOperatorActive(false);\r\n\r\n        if (currentNumber === 0) {\r\n            setCurrentNumber(parseInt(numberInput));\r\n            setDisplayNumber(parseInt(numberInput));\r\n        }\r\n\r\n        if (currentNumber.toString().replace('.', '').length >= 8) {\r\n            return;\r\n        }\r\n\r\n        if (hasDecimalPoint.test(currentNumber)) {\r\n\r\n            if (/^0.0+(?![0-9])/.test(currentNumber + numberInput)) {\r\n                setCurrentNumber(currentNumber + numberInput);\r\n                setDisplayNumber(currentNumber + numberInput);\r\n                return;\r\n            }\r\n\r\n            setCurrentNumber(parseFloat(currentNumber + numberInput));\r\n            setDisplayNumber(parseFloat(currentNumber + numberInput));\r\n            return;\r\n        }\r\n\r\n        setCurrentNumber(parseInt(currentNumber + numberInput));\r\n        setDisplayNumber(parseInt(currentNumber + numberInput));\r\n    };\r\n\r\n    const handleOperatorInput = event => {\r\n        const operatorInput = event.target.innerText;\r\n\r\n        setCurrentNumber(0);\r\n        setOperatorActive(true);\r\n\r\n        // If is first operator\r\n        if (!operator) {\r\n            setPreviousNumber(currentNumber);\r\n            setOperator(operatorInput);\r\n            return;\r\n        }\r\n\r\n\r\n        // Not first operator, calculate the previousNumber and display it\r\n        switch (operator) {\r\n            case '+':\r\n                setPreviousNumber(previousNumber + currentNumber);\r\n                setDisplayNumber(previousNumber + currentNumber);\r\n                break;\r\n            case '-':\r\n                setPreviousNumber(previousNumber - currentNumber);\r\n                setDisplayNumber(previousNumber - currentNumber);\r\n                break;\r\n            case 'ร':\r\n                setPreviousNumber(previousNumber * currentNumber);\r\n                setDisplayNumber(previousNumber * currentNumber);\r\n                break;\r\n            case 'รท':\r\n                setPreviousNumber(previousNumber / currentNumber);\r\n                setDisplayNumber(previousNumber / currentNumber);\r\n                break;\r\n            case '=':\r\n                setPreviousNumber(currentNumber);\r\n                setDisplayNumber(currentNumber);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        setOperator(operatorInput);\r\n    };\r\n\r\n    const clearOrAllClear = () => {\r\n        // If there has currentNumber or operator, clear it\r\n        if (currentNumber || operator) {\r\n            return 'C';\r\n        }\r\n\r\n        // If not, clear all numbers and operator\r\n        return 'AC';\r\n    };\r\n\r\n    const handleClear = () => {\r\n        // Clear currentNumber or operator\r\n        if (clearOrAllClear() === 'C') {\r\n            if (previousNumber && displayNumber) {\r\n                setPreviousNumber(0);\r\n                setDisplayNumber(0);\r\n                setOperator('');\r\n                return;\r\n            }\r\n\r\n            if (currentNumber) {\r\n                setCurrentNumber(0);\r\n                setDisplayNumber(0);\r\n                return;\r\n            }\r\n\r\n            if (operator) {\r\n                setOperator('');\r\n                setDisplayNumber(previousNumber);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All Clear\r\n        if (clearOrAllClear() === 'AC') {\r\n            setDisplayNumber(0);\r\n            setCurrentNumber(0);\r\n            setPreviousNumber(0);\r\n            setOperator('');\r\n            setOperatorActive(false);\r\n        }\r\n    };\r\n\r\n    const positiveOrNegative = () => {\r\n        // If there is no currentNumber, display the previousNumber\r\n        if (!currentNumber) {\r\n            setPreviousNumber(previousNumber * -1);\r\n            setDisplayNumber(previousNumber * -1);\r\n            return;\r\n        }\r\n\r\n        setCurrentNumber(currentNumber * -1);\r\n        setDisplayNumber(currentNumber * -1);\r\n    };\r\n\r\n    const calculatePercentage = () => {\r\n        if (!currentNumber) {\r\n            setPreviousNumber(previousNumber / 100);\r\n            setDisplayNumber(previousNumber / 100);\r\n            return;\r\n        }\r\n\r\n        setCurrentNumber(currentNumber / 100);\r\n        setDisplayNumber(currentNumber / 100);\r\n    };\r\n\r\n    const addDecimalPoint = () => {\r\n        if (currentNumber.toString().match(/\\./) || currentNumber.toString().length >= 8) {\r\n            return;\r\n        }\r\n\r\n        setCurrentNumber(currentNumber + '.');\r\n        setDisplayNumber(currentNumber + '.');\r\n    };\r\n\r\n    console.log('=====')\r\n    console.log('previousNumber', previousNumber)\r\n    console.log('currentNumber', currentNumber)\r\n    console.log('displayNumber', displayNumber)\r\n    console.log('=====')\r\n\r\n    return (\r\n        <Container>\r\n            <Board>{numberWithComma(displayNumber)}</Board>\r\n            <FlexContainer>\r\n                <Button light onClick={handleClear}>{clearOrAllClear()}</Button>\r\n                <Button light onClick={positiveOrNegative}>+/-</Button>\r\n                <Button light onClick={calculatePercentage}>%</Button>\r\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === 'รท'}>รท</Button>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n                <Button onClick={handleNumberInput}>7</Button>\r\n                <Button onClick={handleNumberInput}>8</Button>\r\n                <Button onClick={handleNumberInput}>9</Button>\r\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === 'ร'}>ร</Button>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n                <Button onClick={handleNumberInput}>4</Button>\r\n                <Button onClick={handleNumberInput}>5</Button>\r\n                <Button onClick={handleNumberInput}>6</Button>\r\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === '-'}>-</Button>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n                <Button onClick={handleNumberInput}>1</Button>\r\n                <Button onClick={handleNumberInput}>2</Button>\r\n                <Button onClick={handleNumberInput}>3</Button>\r\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === '+'}>+</Button>\r\n            </FlexContainer>\r\n            <FlexContainer>\r\n                <Button large justify=\"flex-start\" onClick={handleNumberInput}>0</Button>\r\n                <Button onClick={addDecimalPoint}>.</Button>\r\n                <Button onClick={handleOperatorInput}>=</Button>\r\n            </FlexContainer>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}