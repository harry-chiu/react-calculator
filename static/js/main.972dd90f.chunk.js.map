{"version":3,"sources":["App.js","index.js"],"names":["Container","styled","div","FlexContainer","Button","props","justify","large","light","active","Board","App","useState","displayNumber","setDisplayNumber","previousNumber","setPreviousNumber","currentNumber","setCurrentNumber","operator","setOperator","operatorActive","setOperatorActive","handleNumberInput","event","buttonValue","target","innerText","numberInput","replace","length","toString","match","parseFloat","parseInt","handleOperatorInput","operatorInput","clearOrAllClear","toLocaleString","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.972dd90f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    max-width: 480px;\n    width: 100%;\n    height: 100%;\n    background: #000000;\n    color: #ffffff;\n\n    @media(min-width: 480px) {\n        max-width: 414px;\n    }\n`;\n\nconst FlexContainer = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 8px;\n`;\n\nconst Button = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: ${props => props.justify || 'center'};\n    width: ${props => props.large ? '168px' : '80px'};\n    height: 80px;\n    border-radius: ${props => props.large ? '40px' : '50%'};\n    background: ${props => props.light ? '#666666' : '#333333'};\n    padding-left: ${props => props.large ? '32px' : '0'};\n    margin-left: 8px;\n    cursor: pointer;\n    font-size: 24px;\n\n    &:hover {\n        background: ${props => props.light ? '#777777' : '#444444'}\n    }\n\n    &:first-child {\n        margin-left: 0;\n    }\n\n    &:last-child {\n        color: ${props => props.active ? '#FF9800' : '#ffffff'};\n        background: ${props => props.active ? '#ffffff' : '#FF9800'};\n\n        &:hover {\n            background: ${props => props.active ? '#ffffff' : '#FFA726'};\n        }\n    }\n`;\n\nconst Board = styled.div`\n    width: 344px;\n    font-size: 64px;\n    padding: 8px 0;\n    text-align: right;\n`;\n\nconst App = () => {\n    const [displayNumber, setDisplayNumber] = useState(0);\n    const [previousNumber, setPreviousNumber] = useState(0);\n    const [currentNumber, setCurrentNumber] = useState(0);\n    const [operator, setOperator] = useState('');\n    const [operatorActive, setOperatorActive] = useState(false);\n\n    const numberWithComma = number => {\n        return number.toLocaleString();\n    };\n\n    const handleNumberInput = event => {\n        const buttonValue = event.target.innerText;\n        const numberInput = currentNumber + buttonValue || 0 + buttonValue;\n\n        // Cancel operator highlight\n        setOperatorActive(false);\n\n        // Maximum digits is 8;\n        if (numberInput.replace('.', '').length > 8) {\n            return;\n        }\n\n        // If has decimal point\n        if (currentNumber.toString().match(/\\./)) {\n            setDisplayNumber(parseFloat(numberInput));\n            setCurrentNumber(parseFloat(numberInput));\n\n            return;\n        }\n\n        // Display the enterd number\n        setDisplayNumber(parseInt(numberInput));\n        setCurrentNumber(parseInt(numberInput));\n    };\n\n    const handleOperatorInput = event => {\n        const operatorInput = event.target.innerText;\n\n        setCurrentNumber(0);\n        setOperatorActive(true);\n\n        if (displayNumber.toString().length > 8) {\n            setDisplayNumber('Error');\n            setCurrentNumber(0);\n            setPreviousNumber(0);\n            setOperator('');\n            setOperatorActive(false);\n            return;\n        }\n\n        // If is first operator\n        if (!operator) {\n            setPreviousNumber(currentNumber);\n            setOperator(operatorInput);\n            return;\n        }\n\n        // Not first operator, calculate the previousNumber and display it\n        switch (operator) {\n            case '+':\n                setPreviousNumber(previousNumber + currentNumber);\n                setDisplayNumber(previousNumber + currentNumber);\n                break;\n            case '-':\n                setPreviousNumber(previousNumber - currentNumber);\n                setDisplayNumber(previousNumber - currentNumber);\n                break;\n            case 'ร':\n                setPreviousNumber(previousNumber * currentNumber);\n                setDisplayNumber(previousNumber * currentNumber);\n                break;\n            case 'รท':\n                setPreviousNumber(previousNumber / currentNumber);\n                setDisplayNumber(previousNumber / currentNumber);\n                break;\n            case '=':\n                setPreviousNumber(currentNumber);\n                setDisplayNumber(currentNumber);\n                break;\n            default:\n                break;\n        }\n\n        setOperator(operatorInput);\n    };\n\n    const clearOrAllClear = () => {\n        // If there has currentNumber or operator, clear it\n        if (currentNumber || operator) {\n            return 'C';\n        }\n\n        // If not, clear all numbers and operator\n        return 'AC';\n    };\n\n    const handleClear = () => {\n        // Clear currentNumber or operator\n        if (clearOrAllClear() === 'C') {\n            if (previousNumber && displayNumber) {\n                setPreviousNumber(0);\n                setDisplayNumber(0);\n                setOperator('');\n                return;\n            }\n\n            if (currentNumber) {\n                setCurrentNumber(0);\n                setDisplayNumber(0);\n                return;\n            }\n\n            if (operator) {\n                setOperator('');\n                setDisplayNumber(previousNumber);\n                return;\n            }\n        }\n\n        // All Clear\n        if (clearOrAllClear() === 'AC') {\n            setDisplayNumber(0);\n            setCurrentNumber(0);\n            setPreviousNumber(0);\n            setOperator('');\n            setOperatorActive(false);\n        }\n    };\n\n    const positiveOrNegative = () => {\n        // If there is no currentNumber, display the previousNumber\n        if (!currentNumber) {\n            setPreviousNumber(previousNumber * -1);\n            setDisplayNumber(previousNumber * -1);\n            return;\n        }\n\n        setCurrentNumber(currentNumber * -1);\n        setDisplayNumber(currentNumber * -1);\n    };\n\n    const calculatePercentage = () => {\n        if (!currentNumber) {\n            setPreviousNumber(previousNumber / 100);\n            setDisplayNumber(previousNumber / 100);\n            return;\n        }\n\n        setCurrentNumber(currentNumber / 100);\n        setDisplayNumber(currentNumber / 100);\n    };\n\n    const addDecimalPoint = () => {\n        if (currentNumber.toString().match(/\\./)) {\n            return;\n        }\n\n        setCurrentNumber(currentNumber + '.');\n        setDisplayNumber(currentNumber + '.');\n    };\n\n    return (\n        <Container>\n            <Board>{numberWithComma(displayNumber)}</Board>\n            <FlexContainer>\n                <Button light onClick={handleClear}>{clearOrAllClear()}</Button>\n                <Button light onClick={positiveOrNegative}>+/-</Button>\n                <Button light onClick={calculatePercentage}>%</Button>\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === 'รท'}>รท</Button>\n            </FlexContainer>\n            <FlexContainer>\n                <Button onClick={handleNumberInput}>7</Button>\n                <Button onClick={handleNumberInput}>8</Button>\n                <Button onClick={handleNumberInput}>9</Button>\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === 'ร'}>ร</Button>\n            </FlexContainer>\n            <FlexContainer>\n                <Button onClick={handleNumberInput}>4</Button>\n                <Button onClick={handleNumberInput}>5</Button>\n                <Button onClick={handleNumberInput}>6</Button>\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === '-'}>-</Button>\n            </FlexContainer>\n            <FlexContainer>\n                <Button onClick={handleNumberInput}>1</Button>\n                <Button onClick={handleNumberInput}>2</Button>\n                <Button onClick={handleNumberInput}>3</Button>\n                <Button onClick={handleOperatorInput} active={operatorActive && operator === '+'}>+</Button>\n            </FlexContainer>\n            <FlexContainer>\n                <Button large justify=\"flex-start\" onClick={handleNumberInput}>0</Button>\n                <Button onClick={addDecimalPoint}>.</Button>\n                <Button onClick={handleOperatorInput}>=</Button>\n            </FlexContainer>\n        </Container>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}